;;; Quickstart file to activate all packages at startup  -*- lexical-binding:t -*-
;; ¡¡ This file is autogenerated by `package-quickstart-refresh', DO NOT EDIT !!

(let ((load-file-name "/home/das/.emacs.d/elpa/xwidgets-reuse-20200817.147/xwidgets-reuse-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/xwidgets-reuse-20200817.147/xwidgets-reuse-autoloads.el") (car load-path))))



(autoload 'xwidgets-reuse-register-minor-mode "xwidgets-reuse" "\
Registers a MINOR-MODE with xwidgets-reuse.
This minor mode will automatically be turned off when another minor mode from
`xwidgets-reuse--xwidgets-specialization-minor-modes' is used through
`xwidgets-reuse-xwidget-reuse-browse-url'.

\(fn MINOR-MODE)" nil nil)

(autoload 'xwidgets-reuse-xwidget-reuse-browse-url "xwidgets-reuse" "\
Open URL using xwidgets, reusing an existing xwidget buffer if possible.
Optional argument USE-MINOR-MODE is a minor mode to be activated
in the xwidgets session (e.g., for custom keybindings).

\(fn URL &optional USE-MINOR-MODE)" t nil)

(autoload 'xwidgets-reuse-xwidget-external-browse-current-url "xwidgets-reuse" "\
Externally browse url shown in current xwidget session.

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "xwidgets-reuse" '("xwidgets-reuse-")))


)
(let ((load-file-name "/home/das/.emacs.d/elpa/whole-line-or-region-20201214.650/whole-line-or-region-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/whole-line-or-region-20201214.650/whole-line-or-region-autoloads.el") (car load-path))))



(autoload 'whole-line-or-region-local-mode "whole-line-or-region" "\
Make chosen commands operate on the current line if no region is active.
Modify `whole-line-or-region-local-mode-map' to change which
commands are affected.

\(fn &optional ARG)" t nil)

(defvar whole-line-or-region-global-mode nil "\
Non-nil if Whole-Line-Or-Region-Global mode is enabled.
See the `whole-line-or-region-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `whole-line-or-region-global-mode'.")

(custom-autoload 'whole-line-or-region-global-mode "whole-line-or-region" nil)

(autoload 'whole-line-or-region-global-mode "whole-line-or-region" "\
Toggle Whole-Line-Or-Region-Local mode in all buffers.
With prefix ARG, enable Whole-Line-Or-Region-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Whole-Line-Or-Region-Local mode is enabled in all buffers where
`(lambda nil (unless (apply (quote derived-mode-p) whole-line-or-region-inhibit-modes) (whole-line-or-region-local-mode 1)))' would do it.
See `whole-line-or-region-local-mode' for more information on Whole-Line-Or-Region-Local mode.

\(fn &optional ARG)" t nil)

(autoload 'whole-line-or-region-copy-region-as-kill "whole-line-or-region" "\
Call `copy-region-as-kill' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-kill-region "whole-line-or-region" "\
Call `kill-region' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-kill-ring-save "whole-line-or-region" "\
Call `kill-ring-save' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-delete-region "whole-line-or-region" "\
Call `delete-region' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-comment-region "whole-line-or-region" "\
Call `comment-region' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-comment-dwim "whole-line-or-region" "\
Call `comment-dwim' on region or current line.
PREFIX is passed unchanged to `comment-dwim'.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-comment-dwim-2 "whole-line-or-region" "\
Call `comment-dwim' on region or PREFIX whole line.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-uncomment-region "whole-line-or-region" "\
Call `uncomment-region' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-comment-or-uncomment-region "whole-line-or-region" "\
Call `comment-or-uncomment-region' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-indent-rigidly-left-to-tab-stop "whole-line-or-region" "\
Call `indent-rigidly-left-to-tab-stop' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-indent-rigidly-right-to-tab-stop "whole-line-or-region" "\
Call `indent-rigidly-right-to-tab-stop' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-indent-rigidly-left "whole-line-or-region" "\
Call `indent-rigidly-left-to-tab-stop' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(autoload 'whole-line-or-region-indent-rigidly-right "whole-line-or-region" "\
Call `indent-rigidly-right-to-tab-stop' on region or PREFIX whole lines.

\(fn PREFIX)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "whole-line-or-region" '("whole-line-or-region-")))


)
(let ((load-file-name "/home/das/.emacs.d/elpa/macrostep-20161120.2106/macrostep-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/macrostep-20161120.2106/macrostep-autoloads.el") (car load-path))))



(autoload 'macrostep-mode "macrostep" "\
Minor mode for inline expansion of macros in Emacs Lisp source buffers.

\\<macrostep-keymap>Progressively expand macro forms with \\[macrostep-expand], collapse them with \\[macrostep-collapse],
and move back and forth with \\[macrostep-next-macro] and \\[macrostep-prev-macro].
Use \\[macrostep-collapse-all] or collapse all visible expansions to
quit and return to normal editing.

\\{macrostep-keymap}

\(fn &optional ARG)" t nil)

(autoload 'macrostep-expand "macrostep" "\
Expand the macro form following point by one step.

Enters `macrostep-mode' if it is not already active, making the
buffer temporarily read-only. If macrostep-mode is active and the
form following point is not a macro form, search forward in the
buffer and expand the next macro form found, if any.

With a prefix argument, the expansion is displayed in a separate
buffer instead of inline in the current buffer.  Setting
`macrostep-expand-in-separate-buffer' to non-nil swaps these two
behaviors.

\(fn &optional TOGGLE-SEPARATE-BUFFER)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "macrostep" '("macrostep-")))



(autoload 'macrostep-c-mode-hook "macrostep-c" "\


\(fn)" nil nil)

(add-hook 'c-mode-hook #'macrostep-c-mode-hook)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "macrostep-c" '("macrostep-c-")))




)
(let ((load-file-name "/home/das/.emacs.d/elpa/slime-20201216.2342/slime-autoloads.el"))






(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/slime-20201216.2342/slime-autoloads.el") (car load-path))))

(autoload 'slime "slime"
  "Start a Lisp subprocess and connect to its Swank server." t)

(autoload 'slime-mode "slime"
  "SLIME: The Superior Lisp Interaction (Minor) Mode for Emacs." t)

(autoload 'slime-connect "slime"
  "Connect to a running Swank server." t)

(autoload 'slime-selector "slime"
  "Select a new by type, indicated by a single character." t)

(autoload 'hyperspec-lookup "lib/hyperspec" nil t)

(autoload 'slime-lisp-mode-hook "slime")

(autoload 'slime-scheme-mode-hook "slime")

(defvar slime-contribs '(slime-fancy)
  "A list of contrib packages to load with SLIME.")

(autoload 'slime-setup "slime"
  "Setup some SLIME contribs.")

(define-obsolete-variable-alias 'slime-setup-contribs
  'slime-contribs "2.3.2")

(add-hook 'lisp-mode-hook 'slime-lisp-mode-hook)

(provide 'slime-autoloads)



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "slime" '("??" "?c" "?d" "?e" "?i" "?l" "?n" "?p" "?q" "?t" "?v" "def-slime-selector-method" "define-sl" "defslimefun" "inferior-lisp-program" "make-slime-" "sldb-" "slime")))





(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "slime-tests" '("arglist" "async-eval-debugging" "break" "comp" "def-slime-test" "dis" "end-of-file" "find-definition" "flow-control" "indentation" "inspector" "inter" "locally-bound-debugger-hook" "loop-interrupt-" "macroexpand" "narrowing" "read" "report-condition-with-circular-list" "sbcl-world-lock" "sexp-at-point.1" "symbol-at-point." "traditional-recipe" "unwind-to-previous-sldb-level" "utf-8-source")))

)
(let ((load-file-name "/home/das/.emacs.d/elpa/recently-20200120.1432/recently-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/recently-20200120.1432/recently-autoloads.el") (car load-path))))



(defvar recently-mode nil "\
Non-nil if Recently mode is enabled.
See the `recently-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `recently-mode'.")

(custom-autoload 'recently-mode "recently" nil)

(autoload 'recently-mode "recently" "\
Track recently opened files.
When enabled it records recently opened file paths, and
view list and visit again via `recently-show' command.

\(fn &optional ARG)" t nil)

(autoload 'recently-show "recently" "\
Show buffet that lists recently opened files.
BUFFER-NAME, if given, should be a string for buffer to create.

\(fn &optional BUFFER-NAME)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "recently" '("recently-")))


)
(let ((load-file-name "/home/das/.emacs.d/elpa/org-protocol-jekyll-20170328.1639/org-protocol-jekyll-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/org-protocol-jekyll-20170328.1639/org-protocol-jekyll-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-protocol-jekyll" '("org-protocol-jekyll")))


)
(let ((load-file-name "/home/das/.emacs.d/elpa/org-20201216/org-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/org-20201216/org-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-C" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-J" '("obj-" "org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-R" '("ob-R-" "org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-abc" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-asymptote" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-awk" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-calc" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-clojure" '("ob-clojure-" "org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-comint" '("org-babel-comint-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-coq" '("coq-program-name" "org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-css" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-ditaa" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-dot" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-ebnf" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-emacs-lisp" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-eshell" '("ob-eshell-session-live-p" "org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-eval" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-exp" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-forth" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-fortran" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-gnuplot" '("*org-babel-gnuplot-" "org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-groovy" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-haskell" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-hledger" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-io" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-java" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-js" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-latex" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-ledger" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-lilypond" '("lilypond-mode" "org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-lisp" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-lua" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-makefile" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-maxima" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-mscgen" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-ocaml" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-octave" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-org" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-perl" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-picolisp" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-plantuml" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-processing" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-python" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-ref" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-ruby" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-sass" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-scheme" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-screen" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-sed" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-shell" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-shen" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-sql" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-sqlite" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-stan" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-table" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-vala" '("org-babel-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-bibtex" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-docview" '("org-docview-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-eshell" '("org-eshell-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-eww" '("org-eww-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-gnus" '("org-gnus-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-info" '("org-info-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-mhe" '("org-mhe-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-rmail" '("org-rmail-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-w3m" '("org-w3m-")))



(autoload 'org-babel-do-load-languages "org" "\
Load the languages defined in `org-babel-load-languages'.

\(fn SYM VALUE)" nil nil)

(autoload 'org-babel-load-file "org" "\
Load Emacs Lisp source code blocks in the Org FILE.
This function exports the source code using `org-babel-tangle'
and then loads the resulting file using `load-file'.  With
optional prefix argument COMPILE, the tangled Emacs Lisp file is
byte-compiled before it is loaded.

\(fn FILE &optional COMPILE)" t nil)

(autoload 'org-version "org" "\
Show the Org version.
Interactively, or when MESSAGE is non-nil, show it in echo area.
With prefix argument, or when HERE is non-nil, insert it at point.
In non-interactive uses, a reduced version string is output unless
FULL is given.

\(fn &optional HERE FULL MESSAGE)" t nil)

(autoload 'org-load-modules-maybe "org" "\
Load all extensions listed in `org-modules'.

\(fn &optional FORCE)" nil nil)

(autoload 'org-clock-persistence-insinuate "org" "\
Set up hooks for clock persistence." nil nil)

(autoload 'org-mode "org" "\
Outline-based notes management and organizer, alias
\"Carsten's outline-mode for keeping track of everything.\"

Org mode develops organizational tasks around a NOTES file which
contains information about projects as plain text.  Org mode is
implemented on top of Outline mode, which is ideal to keep the content
of large files well structured.  It supports ToDo items, deadlines and
time stamps, which magically appear in the diary listing of the Emacs
calendar.  Tables are easily created with a built-in table editor.
Plain text URL-like links connect to websites, emails (VM), Usenet
messages (Gnus), BBDB entries, and any files related to the project.
For printing and sharing of notes, an Org file (or a part of it)
can be exported as a structured ASCII or HTML file.

The following commands are available:

\\{org-mode-map}

\(fn)" t nil)

(autoload 'org-cycle "org" "\
TAB-action and visibility cycling for Org mode.

This is the command invoked in Org mode by the `TAB' key.  Its main
purpose is outline visibility cycling, but it also invokes other actions
in special contexts.

When this function is called with a `\\[universal-argument]' prefix, rotate the entire
buffer through 3 states (global cycling)
  1. OVERVIEW: Show only top-level headlines.
  2. CONTENTS: Show all headlines of all levels, but no body text.
  3. SHOW ALL: Show everything.

With a `\\[universal-argument] \\[universal-argument]' prefix argument, switch to the startup visibility,
determined by the variable `org-startup-folded', and by any VISIBILITY
properties in the buffer.

With a `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix argument, show the entire buffer, including
any drawers.

When inside a table, re-align the table and move to the next field.

When point is at the beginning of a headline, rotate the subtree started
by this line through 3 different states (local cycling)
  1. FOLDED:   Only the main headline is shown.
  2. CHILDREN: The main headline and the direct children are shown.
               From this state, you can move to one of the children
               and zoom in further.
  3. SUBTREE:  Show the entire subtree, including body text.
If there is no subtree, switch directly from CHILDREN to FOLDED.

When point is at the beginning of an empty headline and the variable
`org-cycle-level-after-item/entry-creation' is set, cycle the level
of the headline by demoting and promoting it to likely levels.  This
speeds up creation document structure by pressing `TAB' once or several
times right after creating a new headline.

When there is a numeric prefix, go up to a heading with level ARG, do
a `show-subtree' and return to the previous cursor position.  If ARG
is negative, go up that many levels.

When point is not at the beginning of a headline, execute the global
binding for `TAB', which is re-indenting the line.  See the option
`org-cycle-emulate-tab' for details.

As a special case, if point is at the very beginning of the buffer, if
there is no headline there, and if the variable `org-cycle-global-at-bob'
is non-nil, this function acts as if called with prefix argument (`\\[universal-argument] TAB',
same as `S-TAB') also when called without prefix argument.

\(fn &optional ARG)" t nil)

(autoload 'org-global-cycle "org" "\
Cycle the global visibility.  For details see `org-cycle'.
With `\\[universal-argument]' prefix ARG, switch to startup visibility.
With a numeric prefix, show all headlines up to that level.

\(fn &optional ARG)" t nil)

(autoload 'org-run-like-in-org-mode "org" "\
Run a command, pretending that the current buffer is in Org mode.
This will temporarily bind local variables that are typically bound in
Org mode to the values they have in Org mode, and then interactively
call CMD.

\(fn CMD)" nil nil)

(autoload 'org-open-file "org" "\
Open the file at PATH.
First, this expands any special file name abbreviations.  Then the
configuration variable `org-file-apps' is checked if it contains an
entry for this file type, and if yes, the corresponding command is launched.

If no application is found, Emacs simply visits the file.

With optional prefix argument IN-EMACS, Emacs will visit the file.
With a double \\[universal-argument] \\[universal-argument] prefix arg, Org tries to avoid opening in Emacs
and to use an external application to visit the file.

Optional LINE specifies a line to go to, optional SEARCH a string
to search for.  If LINE or SEARCH is given, the file will be
opened in Emacs, unless an entry from `org-file-apps' that makes
use of groups in a regexp matches.

If you want to change the way frames are used when following a
link, please customize `org-link-frame-setup'.

If the file does not exist, throw an error.

\(fn PATH &optional IN-EMACS LINE SEARCH)" nil nil)

(autoload 'org-open-at-point-global "org" "\
Follow a link or a time-stamp like Org mode does.
Also follow links and emails as seen by `thing-at-point'.
This command can be called in any mode to follow an external
link or a time-stamp that has Org mode syntax.  Its behavior
is undefined when called on internal links like fuzzy links.
Raise a user error when there is nothing to follow." t nil)

(autoload 'org-offer-links-in-entry "org" "\
Offer links in the current entry and return the selected link.
If there is only one link, return it.
If NTH is an integer, return the NTH link found.
If ZERO is a string, check also this string for a link, and if
there is one, return it.

\(fn BUFFER MARKER &optional NTH ZERO)" nil nil)

(autoload 'org-switchb "org" "\
Switch between Org buffers.

With `\\[universal-argument]' prefix, restrict available buffers to files.

With `\\[universal-argument] \\[universal-argument]' prefix, restrict available buffers to agenda files.

\(fn &optional ARG)" t nil)

(autoload 'org-cycle-agenda-files "org" "\
Cycle through the files in `org-agenda-files'.
If the current buffer visits an agenda file, find the next one in the list.
If the current buffer does not, find the first agenda file." t nil)

(autoload 'org-submit-bug-report "org" "\
Submit a bug report on Org via mail.

Don't hesitate to report any problems or inaccurate documentation.

If you don't have setup sending mail from (X)Emacs, please copy the
output buffer into your mail program, as it gives us important
information about your Org version and configuration." t nil)

(autoload 'org-reload "org" "\
Reload all Org Lisp files.
With prefix arg UNCOMPILED, load the uncompiled versions.

\(fn &optional UNCOMPILED)" t nil)

(autoload 'org-customize "org" "\
Call the customize function with org as argument." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org" '("org-" "turn-on-org-cdlatex")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-attach" '("org-attach-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-attach-git" '("org-attach-git-")))



(autoload 'org-encrypt-entry "org-crypt" "\
Encrypt the content of the current headline." t nil)

(autoload 'org-decrypt-entry "org-crypt" "\
Decrypt the content of the current headline." t nil)

(autoload 'org-encrypt-entries "org-crypt" "\
Encrypt all top-level entries in the current buffer." t nil)

(autoload 'org-decrypt-entries "org-crypt" "\
Decrypt all entries in the current buffer." t nil)

(autoload 'org-crypt-use-before-save-magic "org-crypt" "\
Add a hook to automatically encrypt entries before a file is saved to disk." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-crypt" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ctags" '("org-ctags-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-entities" '("org-entit")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-faces" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-habit" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-inlinetask" '("org-inlinetask-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-macro" '("org-macro-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-mouse" '("org-mouse-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-pcomplete" '("org-" "pcomplete/org-mode/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-protocol" '("org-protocol-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-refile" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-src" '("org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-table" '("org")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-tempo" '("org-tempo-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-timer" '("org-timer-")))



(autoload 'org-release "org-version" "\
The release version of Org.
Inserted by installing Org mode or when a release is made." nil nil)

(autoload 'org-git-version "org-version" "\
The Git version of Org mode.
Inserted by installing Org or when a release is made." nil nil)



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox" '("org-export-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-ascii" '("org-ascii-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-beamer" '("org-beamer-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-html" '("org-html-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-icalendar" '("org-icalendar-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-latex" '("org-latex-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-man" '("org-man-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-md" '("org-md-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-odt" '("org-odt-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-org" '("org-org-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-publish" '("org-publish-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-texinfo" '("org-texinfo-")))




)
(let ((load-file-name "/home/das/.emacs.d/elpa/org-journal-20201222.750/org-journal-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/org-journal-20201222.750/org-journal-autoloads.el") (car load-path))))



(add-hook 'calendar-today-visible-hook 'org-journal-mark-entries)

(add-hook 'calendar-today-invisible-hook 'org-journal-mark-entries)

(autoload 'org-journal-mode "org-journal" "\
Mode for writing or viewing entries written in the journal.

\(fn)" t nil)

(define-obsolete-function-alias 'org-journal-open-next-entry 'org-journal-next-entry)

(define-obsolete-function-alias 'org-journal-open-previous-entry 'org-journal-previous-entry)

(autoload 'org-journal-convert-created-property-timestamps "org-journal" "\
Convert CREATED property timestamps to `org-journal-created-property-timestamp-format'.

\(fn OLD-FORMAT)" t nil)

(autoload 'org-journal-new-entry "org-journal" "\
Open today's journal file and start a new entry.

With a PREFIX arg, open the today's file, create a heading if it doesn't exist yet,
but do not create a new entry.

If given a TIME, create an entry for the time's day. If no TIME was given,
use the current time (which is interpreted as belonging to yesterday if
smaller than `org-extend-today-until`).

Whenever a journal entry is created the `org-journal-after-entry-create-hook'
hook is run.

\(fn PREFIX &optional TIME)" t nil)

(autoload 'org-journal-new-date-entry "org-journal" "\
Open the journal for the date indicated by point and start a new entry.

If the date is not today, it won't be given a time heading. With one prefix (C-u),
don't add a new heading.

If the date is in the future, create a schedule entry, unless two universal prefix
arguments (C-u C-u) are given. In that case insert just the heading.

\(fn PREFIX &optional EVENT)" t nil)

(autoload 'org-journal-new-scheduled-entry "org-journal" "\
Create a new entry in the future with an active timestamp.

With non-nil prefix argument create a regular entry instead of a TODO entry.

\(fn PREFIX &optional SCHEDULED-TIME)" t nil)

(autoload 'org-journal-reschedule-scheduled-entry "org-journal" "\
Reschedule an entry in the future.

\(fn &optional TIME)" t nil)

(autoload 'org-journal-open-current-journal-file "org-journal" "\
Open the current journal file" t nil)

(autoload 'org-journal-invalidate-cache "org-journal" "\
Clear `org-journal--dates' hash table, and the cache file." t nil)

(autoload 'org-journal-mark-entries "org-journal" "\
Mark days in the calendar for which a journal entry is present." t nil)

(autoload 'org-journal-read-entry "org-journal" "\
Open journal entry for selected date for viewing.

\(fn ARG &optional EVENT)" t nil)

(autoload 'org-journal-display-entry "org-journal" "\
Display journal entry for selected date in another window.

\(fn ARG &optional EVENT)" t nil)

(autoload 'org-journal-read-or-display-entry "org-journal" "\
Read an entry for the TIME and either select the new window when NOSELECT
is nil or avoid switching when NOSELECT is non-nil.

\(fn TIME &optional NOSELECT)" nil nil)

(autoload 'org-journal-next-entry "org-journal" "\
Go to the next journal entry." t nil)

(autoload 'org-journal-previous-entry "org-journal" "\
Go to the previous journal entry." t nil)

(autoload 'org-journal-search "org-journal" "\
Search for a string in the journal files.

See `org-read-date' for information on ways to specify dates.
If a prefix argument is given, search all dates.

\(fn STR &optional PERIOD-NAME)" t nil)

(autoload 'org-journal-search-calendar-week "org-journal" "\
Search for a string within a current calendar-mode week entries.

\(fn STR)" t nil)

(autoload 'org-journal-search-calendar-month "org-journal" "\
Search for a string within a current calendar-mode month entries.

\(fn STR)" t nil)

(autoload 'org-journal-search-calendar-year "org-journal" "\
Search for a string within a current calendar-mode year entries.

\(fn STR)" t nil)

(autoload 'org-journal-search-forever "org-journal" "\
Search for a string within all entries.

\(fn STR)" t nil)

(autoload 'org-journal-search-future "org-journal" "\
Search for a string within all future entries.

\(fn STR)" t nil)

(autoload 'org-journal-search-future-scheduled "org-journal" "\
Search for TODOs within all future entries." t nil)

(add-hook 'org-journal-mode-hook (lambda nil (add-hook org-journal-encrypt-on 'org-journal-encryption-hook nil t)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-journal" '("org-journal-")))


)
(let ((load-file-name "/home/das/.emacs.d/elpa/dash-20201223.1755/dash-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/dash-20201223.1755/dash-autoloads.el") (car load-path))))



(autoload 'dash-fontify-mode "dash" "\
Toggle fontification of Dash special variables.

If called interactively, enable Dash-Fontify mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Dash-Fontify mode is a buffer-local minor mode intended for Emacs
Lisp buffers.  Enabling it causes the special variables bound in
anaphoric Dash macros to be fontified.  These anaphoras include
`it', `it-index', `acc', and `other'.  In older Emacs versions
which do not dynamically detect macros, Dash-Fontify mode
additionally fontifies Dash macro calls.

See also `dash-fontify-mode-lighter' and
`global-dash-fontify-mode'.

\(fn &optional ARG)" t nil)

(put 'global-dash-fontify-mode 'globalized-minor-mode t)

(defvar global-dash-fontify-mode nil "\
Non-nil if Global Dash-Fontify mode is enabled.
See the `global-dash-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-dash-fontify-mode'.")

(custom-autoload 'global-dash-fontify-mode "dash" nil)

(autoload 'global-dash-fontify-mode "dash" "\
Toggle Dash-Fontify mode in all buffers.
With prefix ARG, enable Global Dash-Fontify mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Dash-Fontify mode is enabled in all buffers where
`dash--turn-on-fontify-mode' would do it.
See `dash-fontify-mode' for more information on Dash-Fontify mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dash" '("!cdr" "!cons" "--" "->" "-a" "-butlast" "-c" "-d" "-e" "-f" "-gr" "-i" "-keep" "-l" "-m" "-non" "-only-some" "-p" "-r" "-s" "-t" "-u" "-value-to-list" "-when-let" "-zip" "dash-")))




)
(let ((load-file-name "/home/das/.emacs.d/elpa/ht-20201119.518/ht-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/ht-20201119.518/ht-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ht" 'nil))


)
(let ((load-file-name "/home/das/.emacs.d/elpa/mu4e-views-20200830.1608/mu4e-views-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/mu4e-views-20200830.1608/mu4e-views-autoloads.el") (car load-path))))



(autoload 'mu4e-views-mu4e-use-view-msg-method "mu4e-views" "\
Apply METHOD for viewing emails in mu4e-headers view.

\(fn METHOD)" nil nil)

(autoload 'mu4e-views-mu4e-headers-windows-only "mu4e-views" "\
Show only the headers window of mu4e.

\(fn)" t nil)

(autoload 'mu4e-views-cursor-msg-view-window-down "mu4e-views" "\
Scroll message view down if we are viewing the message using xwidget-webkit.

\(fn)" t nil)

(autoload 'mu4e-views-cursor-msg-view-window-up "mu4e-views" "\
Scroll message view up if we are viewing the message using xwidget-webkit.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-headers-next "mu4e-views" "\
Move to next message in headers view.

If a xwidget message view is open then use that to show the
message.  With prefix argument move N steps instead.

\(fn &optional N)" t nil)

(autoload 'mu4e-views-mu4e-headers-prev "mu4e-views" "\
Move to previous message in headers view.

If a xwidget message view is open then use that to show the
message.  With prefix argument move N steps backwards instead.

\(fn &optional N)" t nil)

(autoload 'mu4e-views-mu4e-headers-move "mu4e-views" "\
Move by N steps in the headers view.

Negative numbers move backwards.  If the message view is open
show message in the view.

\(fn N)" t nil)

(autoload 'mu4e-views-mu4e-after-headers-mode "mu4e-views" "\
Called when `mu4e~headers-move' is called to record from where it was called.
Ignore N.

\(fn N)" nil nil)

(autoload 'mu4e-views-mu4e-extract-urls-from-msg "mu4e-views" "\
Prepare mu4e message data structure for MSG.
This data structure is used to support commands like browsing
urls in `mu4e-views' xwidget message view.

\(fn MSG)" t nil)

(autoload 'mu4e-views-mu4e-select-url-from-message "mu4e-views" "\
Select a url from a mu4e message.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-open-attachment "mu4e-views" "\
Select an attached from a mu4e message and open it.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-save-attachment "mu4e-views" "\
Select an attached from a mu4e message and save it.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-save-all-attachments "mu4e-views" "\
Save all attachments to a single directory chosen by the user.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-view-open-attachment "mu4e-views" "\
Wraps the `mu4e-view-open-attachment' function.

Passes on the message stored in `mu4e-views--current-mu4e-message'.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-view-go-to-url "mu4e-views" "\
Wraps the `mu4e-view-go-to-url' function.

Passes on the message stored in `mu4e-views--current-mu4e-message'.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-view-save-url "mu4e-views" "\
Wraps the `mu4e-view-save-url' function.

 Passes on the message stored in `mu4e-views--current-mu4e-message'.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-view-save-attachment "mu4e-views" "\
Wraps the `mu4e-save-attachment' function.

 Passes on the message stored in `mu4e-views--current-mu4e-message'.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-view-save-all-attachments "mu4e-views" "\
Wraps function to save all attachments using `mu4e-views--current-mu4e-message'.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-view-action "mu4e-views" "\
Wraps the `mu4e-view-action' function.

Passes on the message stored in `mu4e-views--current-mu4e-message'.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-view-fetch-url "mu4e-views" "\
Wraps the `mu4e-view-fetch-url' function.

Passes on the message stored in `mu4e-views--current-mu4e-message'.

\(fn)" t nil)

(autoload 'mu4e-views-mu4e-select-view-msg-method "mu4e-views" "\
Select the method for viewing emails in `mu4e'.

\(fn)" t nil)

(autoload 'mu4e-views-unload-function "mu4e-views" "\
Uninstalls the advices on mu4e functions created by mu4e-views.

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mu4e-views" '("mu4e-views-")))


)
(let ((load-file-name "/home/das/.emacs.d/elpa/modus-vivendi-theme-0.12.0/modus-vivendi-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/modus-vivendi-theme-0.12.0/modus-vivendi-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "modus-vivendi-theme" '("modus-vivendi")))


)
(let ((load-file-name "/home/das/.emacs.d/elpa/modus-themes-20201224.2015/modus-themes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/modus-themes-20201224.2015/modus-themes-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "modus-operandi-theme" '("modus-operandi")))



(autoload 'modus-themes-contrast "modus-themes" "\
Measure WCAG contrast ratio between C1 and C2.
C1 and C2 are color values written in hexadecimal RGB.

\(fn C1 C2)" nil nil)

(autoload 'modus-themes-color "modus-themes" "\
Return color value for KEY.
The KEY is the car of each cons cell in the alists
`modus-themes-colors-operandi', `modus-themes-colors-vivendi'.

\(fn KEY)" nil nil)

(autoload 'modus-themes-color-alts "modus-themes" "\
Return color value for KEY-LIGHT and KEY-DARK.
Both arguments must reference the car of a cons cell in
`modus-themes-colors-operandi', `modus-themes-colors-vivendi'.

\(fn KEY-LIGHT KEY-DARK)" nil nil)

(autoload 'modus-themes-load-operandi "modus-themes" "\
Load `modus-operandi' and disable `modus-vivendi'.
Also run `modus-themes-after-load-theme-hook'." nil nil)

(autoload 'modus-themes-load-vivendi "modus-themes" "\
Load `modus-vivendi' and disable `modus-operandi'.
Also run `modus-themes-after-load-theme-hook'." nil nil)

(autoload 'modus-themes-toggle "modus-themes" "\
Toggle between `modus-operandi' and `modus-vivendi' themes.
Also runs `modus-themes-after-load-theme-hook' by virtue of
calling the internal `modus-themes-load-operandi' and
`modus-themes-load-vivendi' functions." t nil)

(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "modus-themes" '("modus-themes-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "modus-themes-core" '("modus-themes-core-theme")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "modus-vivendi-theme" '("modus-vivendi")))




)
(let ((load-file-name "/home/das/.emacs.d/elpa/modus-operandi-theme-0.12.0/modus-operandi-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/modus-operandi-theme-0.12.0/modus-operandi-theme-autoloads.el") (car load-path))))



(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "modus-operandi-theme" '("modus-operandi")))


)
(let ((load-file-name "/home/das/.emacs.d/elpa/markdown-mode-20201220.253/markdown-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/markdown-mode-20201220.253/markdown-mode-autoloads.el") (car load-path))))



(autoload 'markdown-mode "markdown-mode" "\
Major mode for editing Markdown files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode" "\
Major mode for editing GitHub Flavored Markdown files.

\(fn)" t nil)

(autoload 'markdown-view-mode "markdown-mode" "\
Major mode for viewing Markdown content.

\(fn)" t nil)

(autoload 'gfm-view-mode "markdown-mode" "\
Major mode for viewing GitHub Flavored Markdown content.

\(fn)" t nil)

(autoload 'markdown-live-preview-mode "markdown-mode" "\
Toggle native previewing on save for a specific markdown file.

If called interactively, enable Markdown-Live-Preview mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "markdown-mode" '("defun-markdown-" "gfm-" "markdown")))


)
(let ((load-file-name "/home/das/.emacs.d/elpa/elfeed-20201220.1359/elfeed-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/home/das/.emacs.d/elpa/elfeed-20201220.1359/elfeed-autoloads.el") (car load-path))))



(autoload 'elfeed-update "elfeed" "\
Update all the feeds in `elfeed-feeds'." t nil)

(autoload 'elfeed "elfeed" "\
Enter elfeed." t nil)

(autoload 'elfeed-load-opml "elfeed" "\
Load feeds from an OPML file into `elfeed-feeds'.
When called interactively, the changes to `elfeed-feeds' are
saved to your customization file.

\(fn FILE)" t nil)

(autoload 'elfeed-export-opml "elfeed" "\
Export the current feed listing to OPML-formatted FILE.

\(fn FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed" '("elfeed-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-csv" '("elfeed-csv-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-curl" '("elfeed-curl-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-db" '("elfeed-" "with-elfeed-db-visit")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-lib" '("elfeed-")))



(autoload 'elfeed-link-store-link "elfeed-link" "\
Store a link to an elfeed search or entry buffer.

When storing a link to an entry, automatically extract all the
entry metadata.  These can be used in the capture templates as
%:elfeed-entry-<prop>.  See `elfeed-entry--create' for the list
of available props." nil nil)

(autoload 'elfeed-link-open "elfeed-link" "\
Jump to an elfeed entry or search.

Depending on what FILTER-OR-ID looks like, we jump to either
search buffer or show a concrete entry.

\(fn FILTER-OR-ID)" nil nil)

(eval-after-load 'org `(funcall ',(lambda nil (if (version< (org-version) "9.0") (with-no-warnings (org-add-link-type "elfeed" #'elfeed-link-open) (add-hook 'org-store-link-functions #'elfeed-link-store-link)) (with-no-warnings (org-link-set-parameters "elfeed" :follow #'elfeed-link-open :store #'elfeed-link-store-link))))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-log" '("elfeed-log")))



(autoload 'elfeed-search-bookmark-handler "elfeed-search" "\
Jump to an elfeed-search bookmarked location.

\(fn RECORD)" nil nil)

(autoload 'elfeed-search-desktop-restore "elfeed-search" "\
Restore the state of an elfeed-search buffer on desktop restore.

\(fn FILE-NAME BUFFER-NAME SEARCH-FILTER)" nil nil)

(add-to-list 'desktop-buffer-mode-handlers '(elfeed-search-mode . elfeed-search-desktop-restore))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-search" '("elfeed-s")))



(autoload 'elfeed-show-bookmark-handler "elfeed-show" "\
Show the bookmarked entry saved in the `RECORD'.

\(fn RECORD)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-show" '("elfeed-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "xml-query" '("xml-query")))




)
(setq package-activated-list
      (append
       '(xwidgets-reuse whole-line-or-region macrostep slime recently org-protocol-jekyll org org-journal dash ht mu4e-views modus-vivendi-theme modus-themes modus-operandi-theme markdown-mode elfeed)
       package-activated-list))
(progn
  (require 'info)
  (info-initialize)
  (setq Info-directory-list
	(append
	 '("/home/das/.emacs.d/elpa/dash-20201223.1755" "/home/das/.emacs.d/elpa/org-20201216" "/home/das/.emacs.d/elpa/slime-20201216.2342")
	 Info-directory-list)))

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; End:
